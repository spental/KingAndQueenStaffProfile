#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const meow_1 = __importDefault(require("meow"));
const path_1 = __importDefault(require("path"));
const _1 = require(".");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const cli = meow_1.default(`
    Usage
      $ template-file <dataFile> <sourceGlob> <destination>

    Arguments
      data         Data file in JSON; used to replace variables in source files
      sourceGlob   Files to process; see [glob](https://npmjs.com/glob) for syntax
      destination  Destination directory where processed files go

    Examples
      Just handle one file
      $ template-file data.json template.txt build/

      Compile all .abc files in src/ to build/
      $ template-file stuff.json 'src/**/*.abc' build/
  `);
        if (cli.input.length !== 3) {
            cli.showHelp(2);
        }
        const [dataFile, sourceGlob, destination] = cli.input;
        const data = yield Promise.resolve().then(() => __importStar(require(path_1.default.resolve(dataFile))));
        _1.renderToFolder(sourceGlob, destination, data);
    });
}
main();
//# sourceMappingURL=cli.js.map