"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderToFolder = exports.renderFile = exports.render = exports.renderGlob = void 0;
const deep_1 = require("@blakek/deep");
const fs_1 = require("fs");
const glob_1 = __importDefault(require("glob"));
const mkdirp_1 = __importDefault(require("mkdirp"));
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const utils_1 = require("./utils");
function renderGlob(sourceGlob, data, onFileCallback) {
    return __awaiter(this, void 0, void 0, function* () {
        const glob = util_1.promisify(glob_1.default);
        const files = yield glob(sourceGlob);
        for (const file of files) {
            const contents = yield utils_1.limitOpenFiles(() => renderFile(file, data));
            onFileCallback(file, contents);
        }
    });
}
exports.renderGlob = renderGlob;
function getTemplateRegEx() {
    const anything = String.raw `([\s\S]*?)`;
    const optionalNewLines = String.raw `\n*`;
    const optionalWhitespace = String.raw `\s*`;
    const spaceNotNewLines = String.raw `[ \t]*`;
    const tagStart = `{{${optionalWhitespace}`;
    const tagEnd = `${optionalWhitespace}}}`;
    const sectionStart = `${spaceNotNewLines}${tagStart}(?:#(.*?))${tagEnd}${optionalNewLines}`;
    const sectionEnd = String.raw `${optionalWhitespace}${tagStart}/\1${tagEnd}`;
    const repeatingSectionTag = `${sectionStart}${anything}${sectionEnd}`;
    const replacementTag = `${tagStart}(.*?)${tagEnd}`;
    const combinedRegEx = new RegExp(`${repeatingSectionTag}|${replacementTag}`, 'g');
    return combinedRegEx;
}
function render(template, data) {
    const templateRegEx = getTemplateRegEx();
    return template.replace(templateRegEx, (_match, sectionTag, sectionContents, replacementTag) => {
        // Tag is for a repeating section
        if (sectionTag !== undefined) {
            const replacements = deep_1.get(sectionTag, data);
            return replacements
                .map((subData) => {
                return render(sectionContents, Object.assign(Object.assign({}, subData), { this: subData }));
            })
                .join('\n');
        }
        const replacement = deep_1.get(replacementTag, data);
        // If a template variable is found but nothing is supplied to fill it, remove it
        if (replacement === null || replacement === undefined) {
            return '';
        }
        // If the replacement is a function, replace the variable with the result of the function
        if (typeof replacement === 'function') {
            return replacement();
        }
        return replacement;
    });
}
exports.render = render;
function renderFile(filepath, data) {
    return __awaiter(this, void 0, void 0, function* () {
        const templateString = yield fs_1.promises.readFile(filepath, { encoding: 'utf-8' });
        return render(templateString, data);
    });
}
exports.renderFile = renderFile;
function renderToFolder(sourceGlob, destination, data) {
    return __awaiter(this, void 0, void 0, function* () {
        yield mkdirp_1.default(destination);
        function writeFile(filename, contents) {
            const fullPath = path_1.default.join(destination, path_1.default.basename(filename));
            fs_1.promises.writeFile(fullPath, contents);
        }
        return renderGlob(sourceGlob, data, writeFile);
    });
}
exports.renderToFolder = renderToFolder;
//# sourceMappingURL=index.js.map