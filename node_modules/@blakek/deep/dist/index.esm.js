import { curry } from '@blakek/curry';
import { parse } from 'pathington';

function isObject(object) {
  if (object === null) return false;
  const type = typeof object;
  return type === 'object' || type === 'function';
}

const NotFound = Symbol('curriable placeholder');
function traverseObject(object, path) {
  // If the path has been exhausted, return the current object
  if (path.length === 0) {
    return object;
  } // If the value could not be found, return `defaultValue`


  if (!isObject(object)) {
    return NotFound;
  }

  const [key, ...keys] = path; // Search deeper in the object

  if (key in object) {
    return traverseObject(object[key], keys);
  } // The key was not found in the object.


  return NotFound;
}

function _getOr(defaultValue, path, object) {
  if (path === undefined) return object;
  const value = traverseObject(object, parse(path));

  if (value === NotFound || value === undefined) {
    return defaultValue;
  }

  return value;
}

const _get = (path, object) => _getOr(undefined, path, object);

function _has(path, object) {
  const value = traverseObject(object, parse(path));
  return value !== NotFound;
}

function _remove(path, object) {
  if (path === undefined) return object;
  const parsedPath = parse(path);
  const referencePath = parsedPath.slice(0, -1);
  const finalPath = parsedPath[parsedPath.length - 1];
  const reference = traverseObject(object, parse(referencePath));
  if (!reference) return object;
  delete reference[finalPath];
  return object;
}

function _pluck(properties, object) {
  return properties.reduce((subset, property) => _set(_get(property, object), property, subset), {});
}

function _set(value, path, object) {
  const parsedPath = parse(path);
  let reference = object;
  parsedPath.forEach((key, index) => {
    if (index === parsedPath.length - 1) {
      reference[key] = value;
      return;
    }

    if (!isObject(reference[key])) {
      reference[key] = {};
    }

    reference = reference[key];
  });
  return object;
}

const get = curry(_get);
const getOr = curry(_getOr);
const has = curry(_has);
const pluck = curry(_pluck);
const remove = curry(_remove);
const set = curry(_set);

export { get, getOr, has, pluck, remove, set, traverseObject };
