{"version":3,"file":"curry.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { VariadicCurry } from './types';\n\nexport * from './types';\n\ntype GenericFn = (...args: any[]) => any;\n\nexport function curry<T extends any[], R>(\n  fn: (...args: T) => R,\n  arity?: number\n): VariadicCurry<T, R>;\n\nexport function curry(fn: GenericFn, arity: number = fn.length) {\n  return function curried(...args: any[]): any {\n    if (args.length >= arity) {\n      return fn(...args.slice(0, arity));\n    }\n\n    return (...newArgs: any[]) => curried(...args, ...newArgs);\n  };\n}\n\nexport function curryRight<T extends any[], R>(\n  fn: (...args: T) => R,\n  arity?: number\n): VariadicCurry<T, R>;\n\nexport function curryRight(fn: GenericFn, arity: number = fn.length) {\n  return function curried(...args: any[]): any {\n    if (args.length >= arity) {\n      return fn(...args.slice(0, arity).reverse());\n    }\n\n    return (...newArgs: any[]) => curried(...args, ...newArgs);\n  };\n}\n"],"names":["fn","arity","length","curried","args","slice","newArgs","reverse"],"mappings":"2MAWO,SAAeA,EAAeC,mBAAAA,IAAAA,EAAgBD,EAAGE,QAC/C,SAASC,+BAAWC,2BAAAA,yBACrBA,EAAKF,QAAUD,EACVD,eAAMI,EAAKC,MAAM,EAAGJ,IAGtB,sCAAIK,2BAAAA,yBAAmBH,eAAWC,SAASE,oBAS/C,SAAoBN,EAAeC,mBAAAA,IAAAA,EAAgBD,EAAGE,QACpD,SAASC,+BAAWC,2BAAAA,yBACrBA,EAAKF,QAAUD,EACVD,eAAMI,EAAKC,MAAM,EAAGJ,GAAOM,WAG7B,sCAAID,2BAAAA,yBAAmBH,eAAWC,SAASE"}